# =============================================================================
# CONFIGURATION NGINX POUR ECORIDE - SERVEUR WEB + PHP + MVC
# =============================================================================

# Bloc serveur : définit comment Nginx gère les requêtes web
server {
    # Port d'écoute : Nginx écoute sur le port 80 à l'intérieur du conteneur
    # (docker-compose.yml redirige le port 8080 de ton PC vers ce port 80)
    listen 80;
    
    # Nom du serveur : accepte les requêtes pour localhost
    # (peut être étendu pour un vrai nom de domaine en production)
    server_name localhost;
    
    # Racine du site : où se trouvent tes fichiers publics (index.php, CSS, JS)
    # /var/www/public correspond au dossier ./public de ton projet
    root /var/www/public;
    
    # Fichiers d'index : dans quel ordre Nginx cherche la page d'accueil
    # 1. index.php (pour ton MVC)  2. index.html  3. index.htm
    index index.php index.html index.htm;

    # =================================================================
    # GESTION DES ROUTES MVC ECORIDE
    # =================================================================
    
    # Configuration pour ton architecture MVC
    # Si l'URL demandée n'existe pas comme fichier, rediriger vers index.php
    # Exemple : /trajets/creer → index.php?/trajets/creer (routing MVC)
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # =================================================================
    # TRAITEMENT DES FICHIERS PHP
    # =================================================================
    
    # Toutes les requêtes vers des fichiers .php sont traitées ici
    location ~ \.php$ {
        # Inclure les paramètres FastCGI standard
        include fastcgi_params;
        
        # Envoyer la requête au conteneur PHP sur le port 9000
        # "php" = nom du service dans docker-compose.yml
        fastcgi_pass php:9000;
        
        # Fichier d'index PHP par défaut
        fastcgi_index index.php;
        
        # Chemin complet vers le fichier PHP à exécuter
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    # =================================================================
    # OPTIMISATION POUR BOOTSTRAP + CSS + JAVASCRIPT + IMAGES
    # =================================================================
    
    # Gestion optimisée des assets statiques (CSS, JS, images)
    # Ces fichiers sont mis en cache pendant 1 an pour améliorer les performances
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Cache pendant 1 an
        expires 1y;
        
        # Ajouter des headers de cache
        add_header Cache-Control "public, immutable";
        
        # Si le fichier n'existe pas, retourner erreur 404 (ne pas rediriger vers PHP)
        try_files $uri =404;
    }

    # =================================================================
    # SÉCURITÉ : BLOQUER L'ACCÈS AUX FICHIERS SENSIBLES
    # =================================================================
    
    # Bloquer l'accès aux fichiers .htaccess, .env, etc.
    # Ces fichiers contiennent des informations sensibles
    location ~ /\.(ht|env) {
        deny all;
    }

    # Bloquer l'accès direct aux dossiers de configuration et application
    # Les utilisateurs ne doivent pas pouvoir accéder à tes fichiers PHP internes
    location ~ ^/(config|app)/.*$ {
        deny all;
    }
}

# =================================================================
# RÉSULTAT FINAL
# =================================================================
# 
# Cette configuration permet à Nginx de :
#  Servir ton site EcoRide sur http://localhost:8080
#  Traiter tes fichiers PHP via le conteneur PHP-FPM  
#  Gérer ton routing MVC (URLs propres)
#  Optimiser tes assets Bootstrap/CSS/JS
#  Sécuriser l'accès aux fichiers sensibles
#  Fonctionner parfaitement avec ton code existant (60% terminé)
# Prêt pour le développement et la production !
